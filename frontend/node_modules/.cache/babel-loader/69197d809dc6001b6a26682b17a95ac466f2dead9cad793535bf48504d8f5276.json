{"ast":null,"code":"// frontend/src/services/api.js\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL;\nexport const generateQuestion = async (topic, difficulty, questionType) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/generate_question`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        topic,\n        difficulty,\n        question_type: questionType\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to generate question');\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"API Error - generateQuestion:\", error);\n    throw error;\n  }\n};\nexport const evaluateAnswer = async (questionText, userAnswer, correct_answer_info) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/evaluate_answer`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        question_text: questionText,\n        user_answer: userAnswer,\n        correct_answer_info\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to evaluate answer');\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"API Error - evaluateAnswer:\", error);\n    throw error;\n  }\n};\nexport const getStudyPlan = async user_performance_data => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/study_plan`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_performance_data\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to get study plan');\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"API Error - getStudyPlan:\", error);\n    throw error;\n  }\n};\n\n// =========================================================\n// NEW API FUNCTIONS\n// =========================================================\n\nexport const saveAttempt = async attemptData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/save_attempt`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(attemptData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to save attempt');\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"API Error - saveAttempt:\", error);\n    // Do not re-throw if it's just a logging endpoint, continue app flow\n  }\n};\nexport const getPerformanceSummary = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/get_performance_summary`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to get performance summary');\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"API Error - getPerformanceSummary:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","generateQuestion","topic","difficulty","questionType","response","fetch","method","headers","body","JSON","stringify","question_type","ok","errorData","json","Error","error","console","evaluateAnswer","questionText","userAnswer","correct_answer_info","question_text","user_answer","getStudyPlan","user_performance_data","saveAttempt","attemptData","getPerformanceSummary"],"sources":["/Users/renjeff/Documents/work/Coding/gemini_agent/sat_gemini_agent/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL;\n\nexport const generateQuestion = async (topic, difficulty, questionType) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/generate_question`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ topic, difficulty, question_type: questionType })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to generate question');\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"API Error - generateQuestion:\", error);\n    throw error;\n  }\n};\n\nexport const evaluateAnswer = async (questionText, userAnswer, correct_answer_info) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/evaluate_answer`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        question_text: questionText,\n        user_answer: userAnswer,\n        correct_answer_info\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to evaluate answer');\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"API Error - evaluateAnswer:\", error);\n    throw error;\n  }\n};\n\nexport const getStudyPlan = async (user_performance_data) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/study_plan`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ user_performance_data })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to get study plan');\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"API Error - getStudyPlan:\", error);\n    throw error;\n  }\n};\n\n// =========================================================\n// NEW API FUNCTIONS\n// =========================================================\n\nexport const saveAttempt = async (attemptData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/save_attempt`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(attemptData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to save attempt');\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"API Error - saveAttempt:\", error);\n    // Do not re-throw if it's just a logging endpoint, continue app flow\n  }\n};\n\nexport const getPerformanceSummary = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/get_performance_summary`, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to get performance summary');\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"API Error - getPerformanceSummary:\", error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}