{"ast":null,"code":"// frontend/src/utils/dataParser.js\n\nexport const parseQuestionText = questionText => {\n  const parsed = {};\n  const questionMatch = questionText.match(/Question: ([\\s\\S]*?)\\n[A-D]\\)/);\n  if (questionMatch) {\n    parsed.question = questionMatch[1].trim();\n  } else {\n    parsed.question = questionText.split('\\n')[0].replace('Question:', '').trim();\n  }\n  const optionsMatch = questionText.match(/A\\) (.*)\\nB\\) (.*)\\nC\\) (.*)\\nD\\) (.*)/);\n  if (optionsMatch) {\n    parsed.options = {\n      A: optionsMatch[1].trim(),\n      B: optionsMatch[2].trim(),\n      C: optionsMatch[3].trim(),\n      D: optionsMatch[4].trim()\n    };\n  }\n  const correctAnswerMatch = questionText.match(/Correct Answer: (.*)/);\n  if (correctAnswerMatch) {\n    parsed.correctAnswer = correctAnswerMatch[1].trim();\n  } else {\n    parsed.correctAnswer = 'N/A'; // Provide a default if not found\n  }\n  const explanationMatch = questionText.match(/Explanation: ([\\s\\S]*)/);\n  if (explanationMatch) {\n    parsed.explanation = explanationMatch[1].trim();\n  } else {\n    // Provide a default empty string or a placeholder if no explanation is found\n    parsed.explanation = 'No detailed explanation provided by the AI.';\n  }\n  return parsed;\n};","map":{"version":3,"names":["parseQuestionText","questionText","parsed","questionMatch","match","question","trim","split","replace","optionsMatch","options","A","B","C","D","correctAnswerMatch","correctAnswer","explanationMatch","explanation"],"sources":["/Users/renjeff/Documents/work/Coding/gemini_agent/sat_gemini_agent/frontend/src/utils/dataParser.js"],"sourcesContent":["// frontend/src/utils/dataParser.js\n\nexport const parseQuestionText = (questionText) => {\n  const parsed = {};\n  const questionMatch = questionText.match(/Question: ([\\s\\S]*?)\\n[A-D]\\)/);\n  if (questionMatch) {\n    parsed.question = questionMatch[1].trim();\n  } else {\n    parsed.question = questionText.split('\\n')[0].replace('Question:', '').trim();\n  }\n\n\n  const optionsMatch = questionText.match(/A\\) (.*)\\nB\\) (.*)\\nC\\) (.*)\\nD\\) (.*)/);\n  if (optionsMatch) {\n    parsed.options = {\n      A: optionsMatch[1].trim(),\n      B: optionsMatch[2].trim(),\n      C: optionsMatch[3].trim(),\n      D: optionsMatch[4].trim(),\n    };\n  }\n\n  const correctAnswerMatch = questionText.match(/Correct Answer: (.*)/);\n  if (correctAnswerMatch) {\n    parsed.correctAnswer = correctAnswerMatch[1].trim();\n  } else {\n    parsed.correctAnswer = 'N/A'; // Provide a default if not found\n  }\n\n  const explanationMatch = questionText.match(/Explanation: ([\\s\\S]*)/);\n  if (explanationMatch) {\n    parsed.explanation = explanationMatch[1].trim();\n  } else {\n    // Provide a default empty string or a placeholder if no explanation is found\n    parsed.explanation = 'No detailed explanation provided by the AI.';\n  }\n\n  return parsed;\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,iBAAiB,GAAIC,YAAY,IAAK;EACjD,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,aAAa,GAAGF,YAAY,CAACG,KAAK,CAAC,+BAA+B,CAAC;EACzE,IAAID,aAAa,EAAE;IACjBD,MAAM,CAACG,QAAQ,GAAGF,aAAa,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC;EAC3C,CAAC,MAAM;IACLJ,MAAM,CAACG,QAAQ,GAAGJ,YAAY,CAACM,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACF,IAAI,CAAC,CAAC;EAC/E;EAGA,MAAMG,YAAY,GAAGR,YAAY,CAACG,KAAK,CAAC,wCAAwC,CAAC;EACjF,IAAIK,YAAY,EAAE;IAChBP,MAAM,CAACQ,OAAO,GAAG;MACfC,CAAC,EAAEF,YAAY,CAAC,CAAC,CAAC,CAACH,IAAI,CAAC,CAAC;MACzBM,CAAC,EAAEH,YAAY,CAAC,CAAC,CAAC,CAACH,IAAI,CAAC,CAAC;MACzBO,CAAC,EAAEJ,YAAY,CAAC,CAAC,CAAC,CAACH,IAAI,CAAC,CAAC;MACzBQ,CAAC,EAAEL,YAAY,CAAC,CAAC,CAAC,CAACH,IAAI,CAAC;IAC1B,CAAC;EACH;EAEA,MAAMS,kBAAkB,GAAGd,YAAY,CAACG,KAAK,CAAC,sBAAsB,CAAC;EACrE,IAAIW,kBAAkB,EAAE;IACtBb,MAAM,CAACc,aAAa,GAAGD,kBAAkB,CAAC,CAAC,CAAC,CAACT,IAAI,CAAC,CAAC;EACrD,CAAC,MAAM;IACLJ,MAAM,CAACc,aAAa,GAAG,KAAK,CAAC,CAAC;EAChC;EAEA,MAAMC,gBAAgB,GAAGhB,YAAY,CAACG,KAAK,CAAC,wBAAwB,CAAC;EACrE,IAAIa,gBAAgB,EAAE;IACpBf,MAAM,CAACgB,WAAW,GAAGD,gBAAgB,CAAC,CAAC,CAAC,CAACX,IAAI,CAAC,CAAC;EACjD,CAAC,MAAM;IACL;IACAJ,MAAM,CAACgB,WAAW,GAAG,6CAA6C;EACpE;EAEA,OAAOhB,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}